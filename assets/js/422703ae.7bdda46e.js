"use strict";(self.webpackChunkepi_guide=self.webpackChunkepi_guide||[]).push([[8398],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(f,s(s({ref:t},u),{},{components:n})):a.createElement(f,s({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[d]="string"==typeof e?e:i,s[1]=r;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:6},s="Control Statements in C",r={unversionedId:"c/control-statements",id:"c/control-statements",title:"Control Statements in C",description:"Introduction",source:"@site/docs/c/control-statements.mdx",sourceDirName:"c",slug:"/c/control-statements",permalink:"/Epi-guide/docs/c/control-statements",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/c/control-statements.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Operators",permalink:"/Epi-guide/docs/c/Operators"},next:{title:"Function in c",permalink:"/Epi-guide/docs/c/function"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Types of Control Statements",id:"types-of-control-statements",level:2},{value:"If Statement",id:"if-statement",level:2},{value:"Example",id:"example",level:3},{value:"If-else Statement",id:"if-else-statement",level:2},{value:"Example",id:"example-1",level:3},{value:"Nested if-else Statement",id:"nested-if-else-statement",level:3},{value:"Switch Statement",id:"switch-statement",level:2},{value:"Example",id:"example-2",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"control-statements-in-c"},"Control Statements in C"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In this chapter, we will learn about control statements in C. Control statements are used to control the flow of execution of the program. ",(0,i.kt)("br",null),"\nThe control statements are also known as conditional statements. The control statements are used to perform different actions based on different conditions. ",(0,i.kt)("br",null)),(0,i.kt)("h2",{id:"types-of-control-statements"},"Types of Control Statements"),(0,i.kt)("p",null,"There are three types of control statements in C. They are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"if statement"),(0,i.kt)("li",{parentName:"ul"},"if-else statement"),(0,i.kt)("li",{parentName:"ul"},"switch statement")),(0,i.kt)("h2",{id:"if-statement"},"If Statement"),(0,i.kt)("p",null,"The if statement is used to execute a block of code if a given condition is true. ",(0,i.kt)("br",null),"\nThe syntax of the if statement is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"if (condition) {\n    // code to be executed if condition is true\n}\n")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'int main()\n{\n    int a = 10;\n\n    if (a > 5) {\n        printf("a is greater than 5");\n    }\n\n    return 0;\n}\n')),(0,i.kt)("p",null,"That it, if the condition is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the code inside the if block will be ",(0,i.kt)("inlineCode",{parentName:"p"},"executed"),". ",(0,i.kt)("br",null),"\nIf the condition is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", the code inside the if block will be ",(0,i.kt)("inlineCode",{parentName:"p"},"skipped"),". ",(0,i.kt)("br",null)),(0,i.kt)("h2",{id:"if-else-statement"},"If-else Statement"),(0,i.kt)("p",null,"The if-else statement is used to execute a block of code if a given condition is true. ",(0,i.kt)("br",null),"\nIf the condition is false, another block of code can be executed. ",(0,i.kt)("br",null),"\nThe syntax of the if-else statement is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"if (condition) {\n    // code to be executed if condition is true\n} else {\n    // code to be executed if condition is false\n}\n")),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'\nint main()\n{\n    int a = 10;\n\n    if (a > 15) {\n        printf("a is greater than 15");\n    } else {\n        printf("a is less than or equal to 15");\n    }\n\n    return 0;\n}\n')),(0,i.kt)("p",null,"If the condition is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the code inside the if block will be ",(0,i.kt)("inlineCode",{parentName:"p"},"executed"),". ",(0,i.kt)("br",null),"\nIf the condition is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", the code inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"else block")," will be ",(0,i.kt)("inlineCode",{parentName:"p"},"executed"),". ",(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"nested-if-else-statement"},"Nested if-else Statement"),(0,i.kt)("p",null,"The if-else statement can be nested inside another if-else statement. ",(0,i.kt)("br",null),"\nThe syntax of the nested if-else statement is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"if (condition1) {\n    // code to be executed if condition1 is true\n    if (condition2) {\n        // code to be executed if condition2 is true\n    } else {\n        // code to be executed if condition2 is false\n    }\n} else {\n    // code to be executed if condition1 is false\n}\n")),(0,i.kt)("h2",{id:"switch-statement"},"Switch Statement"),(0,i.kt)("p",null,"Switch statements are used to perform different actions based on different conditions. ",(0,i.kt)("br",null),"\nIt's an alternative to the if-else statement to avoid nested if-else statements or a lot of if-else statements. ",(0,i.kt)("br",null),"\nThe syntax of the switch statement is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"switch (expression) {\n    case constant-expression1:\n        // code to be executed if expression is equal to constant-expression1\n        break;\n    case constant-expression2:\n        // code to be executed if expression is equal to constant-expression2\n        break;\n    case constant-expression3:\n        // code to be executed if expression is equal to constant-expression3\n        break;\n    default:\n        // code to be executed if expression is not equal to any constant-expression\n}\n")),(0,i.kt)("h3",{id:"example-2"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'\nint main()\n{\n    int a = 2;\n\n    switch (a) {\n        case 1:\n            write("a is equal to 1");\n            break; // break statement is used to exit the switch statement\n        case 2:\n            write("a is equal to 2");\n            break; // break statement is used to exit the switch statement\n        case 3:\n            write("a is equal to 3");\n            break; // break statement is used to exit the switch statement\n        default:\n            write("a is not equal to 1, 2 or 3");\n        }\n\n    return 0;\n}\n')),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"In this chapter, we learned about control statements in C. ",(0,i.kt)("br",null),"\nWe learned about the if statement, if-else statement and switch statement. ",(0,i.kt)("br",null),"\nWe also learned about nested if-else statements and the break statement in the switch statement. ",(0,i.kt)("br",null),"\nIf you want to learn more about good practices in statements, don't hesitate to talk and search for more information. ",(0,i.kt)("br",null)))}p.isMDXComponent=!0}}]);